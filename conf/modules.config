/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

if (!params.skip_fastp) {
    process {
        withName: 'FASTQ_TRIM_FASTP_MULTIQC:FASTP' {
            ext.args = { "--cut_front --cut_tail --trim_poly_x --cut_mean_quality 20 --qualified_quality_phred 20 --unqualified_percent_limit 20 --length_required ${params.trim_len}" }
            publishDir = [
                [
                    path: { "${params.output}/fastp/log" },
                    mode: 'copy',
                    pattern: "*.{json,html,log}"
                ],
               	[
                    path: { "${params.output}/fastp/fastq_trimmed" },
                    mode: 'copy',
                    pattern: "*.fastp.fastq.gz",
                    enabled: params.save_trimmed_reads
                ],
                [
                    path: { "${params.output}/fastp/trimmed_fail" },
                    mode: 'copy',
                    pattern: "*.fail.fastq.gz",
                    enabled: params.save_trimmed_fail
                ],
            ]
        }

      withName: '.*:MULTIQC' {
        publishDir = [
          [
            path: { "${params.output}" },
            mode: 'copy',
            pattern: "*multiqc.html"
          ]
        ]
      }
    }


}

if (params.sample) {
    process {
        withName: SEQTK_SAMPLE {
            publishDir = [
                path: { "${params.output}/seqtk_sample" },
                mode: 'copy',
				pattern:"*.fastq.gz",
				enabled: params.save_sample_reads
            ]
        }
    }
}

if (params.run_kraken2) {
	process {
		withName: 'KRAKEN2' {
			ext.args = '--report-zero-counts'
			publishDir = [
				[
					path: { "${params.output}/kraken2" },
					mode: 'copy',
					pattern: "*.report.txt"
				],
				[
					path: { "${params.output}/kraken2/classified_fastq" },
					mode: 'copy',
					pattern: "*classified*",
					enabled: params.save_kraken2_classified_reads
				],
				[
					path: { "${params.output}/kraken2/unclassified_fastq" },
					mode: 'copy',
					pattern: "*unclassified*",
					enabled: params.save_kraken2_unclassified_reads
				]
			]
		}
	}
}

if (!params.skip_consensus) {
	// Multifasta Alignment and Reference Prep
	process {
		withName: 'REFERENCE_PREP:BWA_MEM2_ALIGN_DB' {
			ext.args = 'local=true maxindel=80 ambiguous=all'
      publishDir = [
        path: { "${params.output}/final_files/align_to_db" }, 
        mode: 'copy',
        pattern: "*covstats.tsv",
      ]
		}

		withName: 'REFERENCE_PREP:SELECT_REFERENCE' {
			ext.args = { "-m ${params.ref_min_depth} -p ${params.ref_min_cov}" }
			publishDir = [
				[
					path: { "${params.output}/fail/align_to_db" },
					mode: 'copy',
					pattern: "*_failed_assembly.tsv"
				]
			]
		}

		withName: 'REFERENCE_PREP:MAKE_REFERENCE_FASTA' {
			ext.prefix = { "${meta.id}_${ref_info.acc}_${ref_info.tag}" }
			publishDir = [
				path: { "${params.output}/final_files/align_to_selected_ref" },
				mode: 'copy',
				pattern: "*.fa"
			]
		}
	}


	// Consensus Assembly
	process {

		withName: 'CONSENSUS_ASSEMBLY:BWA_MEM2_ALIGN_QUERY' {
			ext.args = 'local=true ambiguous=random'	
			ext.min_coverage = {"${params.ref_min_cov}"}
			ext.min_depth = {"${params.ref_min_depth}"}
			ext.iter = "ref"
			ext.prefix = { "${meta.id}_${ref_info.acc}_${ref_info.tag}_ref" }
			publishDir = [
				[
					path: { "${params.output}/final_files/align_to_selected_ref" },
					mode: 'copy',
					pattern: "*.{bam,bai}"
				],
				[
					path: { "${params.output}/fail/align_to_reference" },
					mode: 'copy',
					pattern: "*_failed_assembly.tsv"
				]
			]
		}

		withName: '.*:IVAR_CONSENSUS_BWA_MEM2_ALIGN_INITIAL_ASSEMBLY:IVAR_CONSENSUS' {
			ext.args = { "-t ${params.ivar_init_t} -q ${params.ivar_init_q} -m ${params.ivar_init_m} -n N" }
			ext.args2 = '--count-orphans --no-BAQ --max-depth 0 --min-BQ 0 -aa'
			ext.prefix = { "${meta.id}_${ref_info.acc}_${ref_info.tag}_consensus1" }
			publishDir = [ 
				path: { "${params.output}/final_files/align_to_consensus" },
				mode: 'copy',
				pattern: "*.fa"
			]
		}

		withName: '.*:IVAR_CONSENSUS_BWA_MEM2_ALIGN_INITIAL_ASSEMBLY:BWA_MEM2_ALIGN' {
			ext.args = 'local=true ambiguous=random'
			ext.prefix = { "${meta.id}_${ref_info.acc}_${ref_info.tag}_consensus1" }
			ext.iter = "con1"
			ext.min_coverage = {"${params.cons_init_min_cov}"}
			ext.min_depth = {"${params.cons_init_min_depth}"}
			publishDir = [
				[
					path: { "${params.output}/final_files/align_to_consensus" },
					mode: 'copy',
					pattern: "*.{bam,bai}",
				],
				[
					path: { "${params.output}/fail/align_to_consensus" },
					mode: 'copy',
					pattern: "*_failed_assembly.tsv"
				]
			]
		}
		withName: 'CONSENSUS_ASSEMBLY:BUILD_FINAL_CONSENSUS' {
			ext.args = { "-t ${params.ivar_fin_t} -q ${params.ivar_fin_q} -m ${params.ivar_fin_m} -n N" }
			ext.args2 = '--count-orphans --no-BAQ --max-depth 0 --min-BQ 0 -aa'
			ext.prefix = { "${meta.id}_${ref_info.acc}_${ref_info.tag}_consensus_final" }
			publishDir = [ 
				path: { "${params.output}/final_files/final_assemblies" },
				mode: 'copy',
				pattern: "*.fa"
			]
		}
	}

	process {
		withName: BAM_TO_FASTQ {
			ext.prefix = { "${meta.id}_${ref_info.acc}_${ref_info.tag}" }
			publishDir = [
				path: { "${params.output}/final_files/SRA" },
				mode: 'copy',
				pattern: "*_SRA.fastq.gz"
			]
		}
	}

	process {
		withName: SUMMARY {
			ext.prefix = { "${meta.id}_${ref_info.acc}_${ref_info.tag}" }
			/*
			publishDir = [
				path: { "${params.output}/summary" },
				mode: 'copy',
				pattern: "*.tsv"
			]
			*/
		}
	}

}
